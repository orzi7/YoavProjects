#include <Keypad.h>
#include <LiquidCrystal_I2C.h>
#include "Servo.h"
#include <Arduino.h>

LiquidCrystal_I2C lcd(0x27,16,2);
Servo myservo;

#define servoPin 2
#define S0 14
#define S1 15
#define S2 16
#define S3 17
#define sensorOut 18

#define NOTE_B0 31
#define NOTE_C1 33
#define NOTE_CS1 35
#define NOTE_D1 37
#define NOTE_DS1 39
#define NOTE_E1 41
#define NOTE_F1 44
#define NOTE_FS1 46
#define NOTE_G1 49
#define NOTE_GS1 52
#define NOTE_A1 55
#define NOTE_AS1 58
#define NOTE_B1 62
#define NOTE_C2 65
#define NOTE_CS2 69
#define NOTE_D2 73
#define NOTE_DS2 78
#define NOTE_E2 82
#define NOTE_F2 87
#define NOTE_FS2 93
#define NOTE_G2 98
#define NOTE_GS2 104
#define NOTE_A2 110
#define NOTE_AS2 117
#define NOTE_B2 123
#define NOTE_C3 131
#define NOTE_CS3 139
#define NOTE_D3 147
#define NOTE_DS3 156
#define NOTE_E3 165
#define NOTE_F3 175
#define NOTE_FS3 185
#define NOTE_G3 196
#define NOTE_GS3 208
#define NOTE_A3 220
#define NOTE_AS3 233
#define NOTE_B3 247
#define NOTE_C4 262
#define NOTE_CS4 277
#define NOTE_D4 294
#define NOTE_DS4 311
#define NOTE_E4 330
#define NOTE_F4 349
#define NOTE_FS4 370
#define NOTE_G4 392
#define NOTE_GS4 415
#define NOTE_A4 440
#define NOTE_AS4 466
#define NOTE_B4 494
#define NOTE_C5 523
#define NOTE_CS5 554
#define NOTE_D5 587
#define NOTE_DS5 622
#define NOTE_E5 659
#define NOTE_F5 698
#define NOTE_FS5 740
#define NOTE_G5 784
#define NOTE_GS5 831
#define NOTE_A5 880
#define NOTE_AS5 932
#define NOTE_B5 988
#define NOTE_C6 1047
#define NOTE_CS6 1109
#define NOTE_D6 1175
#define NOTE_DS6 1245
#define NOTE_E6 1319
#define NOTE_F6 1397
#define NOTE_FS6 1480
#define NOTE_G6 1568
#define NOTE_GS6 1661
#define NOTE_A6 1760
#define NOTE_AS6 1865
#define NOTE_B6 1976
#define NOTE_C7 2093


const int buzzerPin1 = 28;
const int buzzerPin2 = 30;

const byte ROWS = 4;
const byte COLS = 3;

char hexaKeys[ROWS][COLS] = {
  {'1', '2', '3'},
  {'4', '5', '6'},
  {'7', '8', '9'},
  {'*', '0', '#'}
};

byte rowPins[ROWS] = {9, 8, 7, 6};
byte colPins[COLS] = {5, 4, 3};

Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS);

int redFrequency = 0;
int greenFrequency = 0;
int blueFrequency = 0;

int redColor;
int greenColor;
int blueColor;

String result;
String secretCode;
String colorOrder;
String detectedColors = "";

int attempts = 1;
int colorAttempts = 1;

int minutes = 0;
int seconds = 0;

int stage = 0;

bool playedLoosingSound = false;

unsigned long lastTimerUpdate = 0;

void setTime(int startMinutes, int startSeconds) {
  minutes = startMinutes;
  seconds = startSeconds;
}

void updateTimer() {
  if (stage != 3) {
    unsigned long currentMillis = millis();
    if (currentMillis - lastTimerUpdate >= 1000) {
      lastTimerUpdate = currentMillis;

      if (minutes >= 0 && seconds >= 0) {
        if (seconds == 0) {
          minutes--;
          seconds = 59;
        } else {
          seconds--;
        }

        lcd.setCursor(6, 1);
        if (minutes < 10) lcd.print("0");
        lcd.print(minutes);
        lcd.print(":");
        if (seconds < 10) lcd.print("0");
        lcd.print(seconds);
      } else {
        lcd.clear();
        lcd.setCursor(0, 1);
        lcd.print("Time's up!");
        if (playedLoosingSound == false) {
          int loseMelody[] = { NOTE_C5, NOTE_GS4, NOTE_E4 };
          int loseDurations[] = { 300, 300, 400 };
          playMelody(loseMelody, loseDurations, 3);
          playedLoosingSound = true;
        }
      }
    }
  }
}


void playMelody(int melody[], int noteDurations[], int length) {
  for (int i = 0; i < length; i++) {
    int noteDuration = noteDurations[i];
    tone(buzzerPin1, melody[i], noteDuration);
    tone(buzzerPin2, melody[i], noteDuration);
    delay(noteDuration * 1.30);
    noTone(buzzerPin1);
    noTone(buzzerPin2);
  }
}


void setup() {
  Serial.begin(9600);

  myservo.attach(servoPin);

  lcd.init();
  lcd.clear();         
  lcd.backlight();

  pinMode(11, OUTPUT);
  pinMode(12, OUTPUT);
  pinMode(19, OUTPUT);

  randomSeed(analogRead(A0));
  secretCode = randomNum();
  colorOrder = randomColor();

  Serial.println(secretCode);
  Serial.println(colorOrder);

  pinMode(S0, OUTPUT);
  pinMode(S1, OUTPUT);
  pinMode(S2, OUTPUT);
  pinMode(S3, OUTPUT);

  myservo.write(0);
  delay(1000);
  
  pinMode(sensorOut, INPUT);
  
  digitalWrite(S0,HIGH);
  digitalWrite(S1,LOW);

  setTime(3, 30);

  lcd.setCursor(0,0);
  lcd.print("Guess the 4 nums");
  lcd.setCursor(0,1);
  lcd.print("or world ends!");
  delay(3000);
  lcd.clear();
  stage = 1;
}

String randomNum() {
  int randNum = random(1000, 10000);
  //randNum = 6392;
  return String(randNum);
}

String randomColor() {
  String randColorOptions[] = {"B", "G", "R"};
  int randColorNum1 = random(0, 3);
  int randColorNum2 = random(0, 3);
  int randColorNum3 = random(0, 3);
  String randColor = randColorOptions[randColorNum1] + randColorOptions[randColorNum2] + randColorOptions[randColorNum3];
  //randColor = "BGR";
  return String(randColor);
}

bool checkColorOrder(String triedOrder, String realOrder) {
  if (triedOrder == realOrder) {
    return true;
  } else {
    return false;
  }
}

void clearTop() {
  lcd.setCursor(0, 0);
  lcd.print("                ");
}

bool check(String triedCode, String realCode) {
  if (triedCode == realCode) {
    lcd.clear();
    lcd.setCursor(2,0);
    lcd.print("yahhhhh");
    digitalWrite(19, LOW);
    digitalWrite(12, HIGH);
    digitalWrite(11, LOW);
    return true;
  } else {
    //lcd.clear();
    //lcd.setCursor(2,0);
  }
  if (triedCode > realCode) {
    digitalWrite(11, HIGH);
    digitalWrite(12, LOW);
    digitalWrite(19, LOW);
    return false;
  }

  if (triedCode < realCode) {
    digitalWrite(11, LOW);
    digitalWrite(12, LOW);
    digitalWrite(19, HIGH);
    return false;
  } 
}

void loop() {
  updateTimer();

  if (stage == 1) {
    digitalWrite(11, LOW);
    digitalWrite(12, LOW);
    digitalWrite(19, LOW);
    char customKey = customKeypad.getKey();

    if (customKey) {
      if (customKey == '*') {
        result.remove(result.length() - 1);
      }
      else {
        result += customKey;
      }
      clearTop();
      lcd.setCursor(2,0);
      lcd.print(result);
    }

    if (result.length() == 4) {
      bool correct = check(result, secretCode);
      if (correct) {
        secretCode = randomNum();
        clearTop();
        lcd.setCursor(2,0);
        lcd.print("you made it in: ");
        lcd.setCursor(2,1);
        lcd.print(attempts);
        lcd.setCursor(4,1);
        lcd.print("attempts");
        digitalWrite(12, LOW);
        delay(2000);
        clearTop();
        lcd.setCursor(0,0);
        lcd.print("Guess 3 colors");
        lcd.setCursor(0,1);
        lcd.print("or world ends!");
        delay(2000);
        lcd.clear();
        stage = 2;
      } else if (result.toInt() == 1977) {
        clearTop();
        lcd.setCursor(0,0);
        lcd.print("Easter Egg!");
        int starWarsMelody[] = {
            NOTE_A4, NOTE_A4, NOTE_A4, NOTE_F5, NOTE_C6,
            NOTE_A4, NOTE_F5, NOTE_C6, NOTE_A4,
            NOTE_E6, NOTE_E6, NOTE_E6, NOTE_F6, NOTE_C6, NOTE_GS5, NOTE_F5, NOTE_C6, NOTE_A4
          };

        int starWarsDurations[] = {
          500, 500, 500, 350, 150,
          500, 350, 150, 650,
          500, 500, 500, 350, 150, 500, 350, 150, 650
        };
        playMelody(starWarsMelody, starWarsDurations, 18);
        if (attempts > 0) {
          attempts -= 1;
        }
        if (result.toInt() > secretCode.toInt()) {
          clearTop();
          lcd.setCursor(2,0);
          lcd.print("Lower!");
        } else {
          clearTop();
          lcd.setCursor(2,0);
          lcd.print("Higher!");
        }
      } else if (correct == false) {
          attempts += 1;
          if (result.toInt() > secretCode.toInt()) {
            clearTop();
            lcd.setCursor(2,0);
            lcd.print("Lower!");
          } else {
            clearTop();
            lcd.setCursor(2,0);
            lcd.print("Higher!");
          }
        }
      result = "";
    }
  }

//--------------------------------------------------------------------------------------------------------------

  if (stage == 2) {
    char customKey = customKeypad.getKey();
      if (customKey) {
        if (customKey == '*') {
          detectedColors.remove(detectedColors.length() - 1);
          clearTop();
          lcd.setCursor(2,0);
          lcd.print(detectedColors);
        }
      }


    if (customKey == '#') {

      digitalWrite(S2,LOW);
      digitalWrite(S3,LOW);
      
      redFrequency = pulseIn(sensorOut, LOW);
      redColor = map(redFrequency, 70, 120, 255,0);

      digitalWrite(S2,HIGH);
      digitalWrite(S3,HIGH);
      
      greenFrequency = pulseIn(sensorOut, LOW);
      greenColor = map(greenFrequency, 100, 199, 255, 0);

      digitalWrite(S2,LOW);
      digitalWrite(S3,HIGH);
      
      blueFrequency = pulseIn(sensorOut, LOW);
      blueColor = map(blueFrequency, 38, 84, 255, 0);

      if (redColor > greenColor && redColor > blueColor){
        detectedColors += "R";
      }
      if (greenColor > redColor && greenColor > blueColor){
        detectedColors += "G";
      }
      if (blueColor > redColor && blueColor > greenColor){
        detectedColors += "B";
      }

      clearTop();
      lcd.setCursor(2,0);
      lcd.print(detectedColors);

      if (detectedColors.length() == 3) {
        delay(500);
        bool rightOrder = checkColorOrder(detectedColors, colorOrder);
        if (rightOrder) {
          digitalWrite(12, HIGH);
          clearTop();
          lcd.setCursor(2,0);
          lcd.print("you made it in: ");
          lcd.setCursor(2,1);
          lcd.print(colorAttempts);
          lcd.setCursor(4,1);
          lcd.print("attempts");
          myservo.write(90);

          int winMelody[] = {
            NOTE_E5, NOTE_E5, NOTE_E5, 
            NOTE_C5, NOTE_E5, NOTE_G5, 
            NOTE_G4,
            NOTE_C5, NOTE_G4, NOTE_E4, NOTE_A4, NOTE_B4,
            NOTE_AS4, NOTE_A4, NOTE_G4, NOTE_E5, NOTE_G5, NOTE_A5,
            NOTE_F5, NOTE_G5, 
            NOTE_E5, NOTE_C5, NOTE_D5, NOTE_B4
          };

          int winDurations[] = {
            125, 125, 125, 
            125, 125, 125, 
            375,
            125, 125, 125, 125, 125,
            125, 125, 125, 125, 125, 125,
            125, 125,
            125, 125, 125, 250
          };
          playMelody(winMelody, winDurations, 24);

          stage = 3;
        } else{
          colorAttempts += 1;
          clearTop();
          lcd.setCursor(2,0);
          lcd.print("wrong!");
          detectedColors = "";
          }
      }
    }
  }


//------------------------------------------------------------------------------


  if (stage == 3) {
    delay(500);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Your'e the");
    lcd.setCursor(0,1);
    lcd.print("ultimate leader");
  }
}
